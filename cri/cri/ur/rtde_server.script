# UR RTDE server for Common Robot Interface

def run_server():

    def send_command_complete():
        # send command complete signal to client
        write_output_integer_register(0, 1)

        # wait for ack from client
        command = read_input_integer_register(0)
        while command != 0:
            command = read_input_integer_register(0)
            sync()
        end
        
        # reset command complete signal
        write_output_integer_register(0, 0)
    end

    # initialize variables
    PAYLOAD_MASS = 0.27
    GRAVITY_ACCEL = [0.0, 0.0, 9.82]

    linear_accel = 0.05
    linear_speed = 0.05
    angular_accel = 0.05
    angular_speed = 0.05
    blend_radius = 0
    tcp = p[0, 0, 0, 0, 0, 0]
    
    set_payload(PAYLOAD_MASS)
    set_gravity(GRAVITY_ACCEL)    
    set_tcp(tcp)
    
    thread_running = False

    # set up watchdog (period = 1000s)
    rtde_set_watchdog("input_int_register_0", 0.001, "PAUSE")
    
    # initialize command status
    write_output_integer_register(0, 0) 
    
    # wait for client to initialize (command = 0 = none)
    command = read_input_integer_register(0)
    while command != 0:
        command = read_input_integer_register(0)
        sync()
    end
    
    # main server loop ...
    while True:
        command = read_input_integer_register(0)
        if command == 0:        # no command
            # do nothing

        elif command == 1:      # move joints
            # read joint angles
            j0 = read_input_float_register(0)
            j1 = read_input_float_register(1)
            j2 = read_input_float_register(2)
            j3 = read_input_float_register(3)
            j4 = read_input_float_register(4)
            j5 = read_input_float_register(5)
            joint_angles = [j0, j1, j2, j3, j4, j5]

            # wait for any previous worker thread to finish
            if thread_running:
                join worker_thread
                thread_running = False
            end

            # run command            
            if blend_radius > 0:
                # run command asynchronously on worker thread 
                global worker_q = joint_angles
                global worker_a = angular_accel
                global worker_v = angular_speed
                global worker_r = blend_radius
                thread move_joints_thread():
                    movej(worker_q, a=worker_a, v=worker_v, r=worker_r)                                  
                end                
                thread_running = True
                worker_thread = run move_joints_thread()
            else:
                # run command synchronously
                movej(joint_angles, a=angular_accel, v=angular_speed, r=blend_radius)             
            end

            # send command complete signal to client
            send_command_complete()

        elif command == 2:      # move linear            
            # read pose
            x = read_input_float_register(0)
            y = read_input_float_register(1)
            z = read_input_float_register(2)
            ax = read_input_float_register(3)
            ay = read_input_float_register(4)
            az = read_input_float_register(5)
            pose = p[x, y, z, ax, ay, az]
 
            # wait for any previous worker thread to finish
            if thread_running:
                join worker_thread
                thread_running = False
            end

            # run command            
            if blend_radius > 0:
                # run command asynchronously on worker thread 
                global worker_p = pose
                global worker_a = linear_accel
                global worker_v = linear_speed
                global worker_r = blend_radius
                thread move_linear_thread():
                    movel(worker_p, a=worker_a, v=worker_v, r=worker_r)                
                end
                thread_running = True
                worker_thread = run move_linear_thread()
            else:
                # run command synchronously
                movel(pose, a=linear_accel, v=linear_speed, r=blend_radius)                
            end

            # send command complete signal to client
            send_command_complete() 

        elif command == 3:      # move circular
            # read via_pose and end_pose
            x = read_input_float_register(6)
            y = read_input_float_register(7)
            z = read_input_float_register(8)
            ax = read_input_float_register(9)
            ay = read_input_float_register(10)
            az = read_input_float_register(11)
            via_pose = p[x, y, z, ax, ay, az]
            
            x = read_input_float_register(12)
            y = read_input_float_register(13)
            z = read_input_float_register(14)
            ax = read_input_float_register(15)
            ay = read_input_float_register(16)
            az = read_input_float_register(17)
            end_pose = p[x, y, z, ax, ay, az]

            # wait for any previous worker thread to finish
            if thread_running:
                join worker_thread
                thread_running = False
            end

            # run command            
            if blend_radius > 0:
                # run command asynchronously on worker thread 
                global worker_p_via = via_pose
                global worker_p_end = end_pose        
                global worker_a = linear_accel
                global worker_v = linear_speed
                global worker_r = blend_radius
                thread move_circular_thread():
                    movec(worker_p_via, worker_p_end, a=worker_a, v=worker_v, r=worker_r)                                    
                end
                thread_running = True
                worker_thread = run move_circular_thread()
            else:
                # run command synchronously
                movec(via_pose, end_pose, a=linear_accel, v=linear_speed, r=blend_radius)              
            end

            # send command complete signal to client
            send_command_complete()   

        elif command == 4:      # set tcp
            # read tcp
            x = read_input_float_register(0)
            y = read_input_float_register(1)
            z = read_input_float_register(2)
            ax = read_input_float_register(3)
            ay = read_input_float_register(4)
            az = read_input_float_register(5)
            tcp = p[x, y, z, ax, ay, az]

            # wait for any previous worker thread to finish
            if thread_running:
                join worker_thread
                thread_running = False
            end
                        
            # run command
            set_tcp(tcp)

            # send command complete signal to client
            send_command_complete()
            
        elif command == 5:      # set linear acceleration
            # read linear acceleration
            new_linear_accel = read_input_float_register(18)
                        
            # run command
            linear_accel = new_linear_accel

            # send command complete signal to client
            send_command_complete()        
            
        elif command == 6:      # set linear speed
            # read linear speed
            new_linear_speed = read_input_float_register(18)
                        
            # run command
            linear_speed = new_linear_speed

            # send command complete signal to client
            send_command_complete()

        elif command == 7:      # set angular acceleration
            # read angular acceleration
            new_angular_accel = read_input_float_register(18)
                        
            # run command
            angular_accel = new_angular_accel

            # send command complete signal to client
            send_command_complete()
            
        elif command == 8:      # set angular speed
            # read angular speed
            new_angular_speed = read_input_float_register(18)
                        
            # run command
            angular_speed = new_angular_speed

            # send command complete signal to client
            send_command_complete()
            
        elif command == 9:      # set blend radius
            # read blend radius
            new_blend_radius = read_input_float_register(18)
                        
            # run command
            blend_radius = new_blend_radius

            # send command complete signal to client
            send_command_complete()

        elif command == 10:     # move joint speed
            # read joint speeds
            jd0 = read_input_float_register(0)
            jd1 = read_input_float_register(1)
            jd2 = read_input_float_register(2)
            jd3 = read_input_float_register(3)
            jd4 = read_input_float_register(4)
            jd5 = read_input_float_register(5)
            move_joint_speeds = [jd0, jd1, jd2, jd3, jd4, jd5]

            # read joint acceleration
            move_joint_accel = read_input_float_register(19)

            # read return time (<0 => unspecified)
            return_time = read_input_float_register(20)

            # wait for any previous worker thread to finish
            if thread_running:
                join worker_thread
                thread_running = False
            end

            # run command asynchronously on worker thread
            global worker_move_joint_speeds = move_joint_speeds
            global worker_move_joint_accel = move_joint_accel
            global worker_return_time = return_time
            thread move_joint_speed_thread():
                if worker_return_time < 0:
                    speedj(worker_move_joint_speeds, a=worker_move_joint_accel)
                else:
                    speedj(worker_move_joint_speeds, a=worker_move_joint_accel, t=worker_return_time)
                end
            end
            thread_running = True
            worker_thread = run move_joint_speed_thread()

            # send command complete signal to client
            send_command_complete()

        elif command == 11:     # move linear speed
            # read linear speed
            xd = read_input_float_register(0)
            yd = read_input_float_register(1)
            zd = read_input_float_register(2)
            axd = read_input_float_register(3)
            ayd = read_input_float_register(4)
            azd = read_input_float_register(5)
            move_linear_speed = [xd, yd, zd, axd, ayd, azd]

            # read linear acceleration
            move_linear_accel = read_input_float_register(19)

            # read return time (<0 => unspecified)
            return_time = read_input_float_register(20)

            # wait for any previous worker thread to finish
            if thread_running:
                join worker_thread
                thread_running = False
            end

            # run command asynchronously on worker thread
            global worker_move_linear_speed = move_linear_speed
            global worker_move_linear_accel = move_linear_accel
            global worker_return_time = return_time
            thread move_linear_speed_thread():
                if worker_return_time < 0:
                    speedl(worker_move_linear_speed, a=worker_move_linear_accel)
                else:
                    speedl(worker_move_linear_speed, a=worker_move_linear_accel, t=worker_return_time)
                end
            end
            thread_running = True
            worker_thread = run move_linear_speed_thread()

            # send command complete signal to client
            send_command_complete()

        elif command == 12:     # stop joints
            # read joint acceleration
            stop_joints_accel = read_input_float_register(18)

            # wait for any previous worker thread to finish
            if thread_running:
                join worker_thread
                thread_running = False
            end

            # run command
            stopj(stop_joints_accel)

            # send command complete signal to client
            send_command_complete()

        elif command == 13:     # stop linear
            # read linear acceleration
            stop_linear_accel = read_input_float_register(18)

            # wait for any previous worker thread to finish
            if thread_running:
                join worker_thread
                thread_running = False
            end

            # run command
            stopl(stop_linear_accel)

            # send command complete signal to client
            send_command_complete()

        else:
            popup("Invalid command")

        end
        sync()
    end
end

run_server()